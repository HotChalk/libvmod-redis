varnishtest "Tests command execution timeout"

server s1 {
   rxreq
   txresp
} -repeat 1 -start

varnish v1 -vcl+backend {
    import redis from "${vmod_topbuild}/src/.libs/libvmod_redis.so";

    sub vcl_init {
        redis.init("main", "${redis_master1_address}", 500, 0, 0, 0, 0, false, 1);
    }

    sub vcl_deliver {
        # Fast command (no timeout).
        redis.command("SET");
        redis.push("foo");
        redis.push("hello");
        redis.execute();
        set resp.http.Replied-1 = redis.replied();
        set resp.http.Reply-1 = redis.get_reply();

        # Slow command (no timeout).
        redis.command("DEBUG");
        redis.push("sleep");
        redis.push("3");
        redis.execute();
        set resp.http.Replied-2 = redis.replied();
        set resp.http.Reply-2 = redis.get_reply();

        # Fast command (1000 ms timeout).
        redis.command("SET");
        redis.push("foo");
        redis.push("hello");
        redis.timeout(1000);
        redis.execute();
        set resp.http.Replied-3 = redis.replied();
        set resp.http.Reply-3 = redis.get_reply();

        # Slow command (1000 ms timeout).
        redis.command("DEBUG");
        redis.push("sleep");
        redis.push("3");
        redis.timeout(1000);
        redis.execute();
        set resp.http.Replied-4 = redis.replied();
        set resp.http.Reply-4 = redis.get_reply();

        # Fast command (no timeout).
        redis.command("SET");
        redis.push("foo");
        redis.push("hello");
        redis.execute();
        set resp.http.Replied-5 = redis.replied();
        set resp.http.Reply-5 = redis.get_reply();

        # Slow command (no timeout).
        redis.command("DEBUG");
        redis.push("sleep");
        redis.push("3");
        redis.execute();
        set resp.http.Replied-6 = redis.replied();
        set resp.http.Reply-6 = redis.get_reply();
    }
} -start

client c1 {
    txreq
    rxresp

    expect resp.http.Replied-1 == "true"
    expect resp.http.Reply-1 == "OK"

    expect resp.http.Replied-2 == "true"
    expect resp.http.Reply-2 == "OK"

    expect resp.http.Replied-3 == "true"
    expect resp.http.Reply-3 == "OK"

    expect resp.http.Replied-4 == "false"
    expect resp.http.Reply-4 == ""

    expect resp.http.Replied-5 == "true"
    expect resp.http.Reply-5 == "OK"

    expect resp.http.Replied-6 == "true"
    expect resp.http.Reply-6 == "OK"
} -run

varnish v1 -expect client_req == 1
